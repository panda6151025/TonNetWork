;; Simple wallet smart contract



(int, cell, cell, cell, cell) unpack_state() inline_ref {
  var ds = get_data().begin_parse();
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers ) = (ds~load_uint(16), ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict());
  ds.end_parse();
  return (current_period, pool_config, performance, subscriptions, subscribers);
}

cell pack_state(  int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers ) inline_ref {
  return begin_cell()
    .store_uint(current_period, 16) ;; current period
    .store_dict(pool_config) ;; configuration cell
    .store_dict(performance) ;; perfirmance dict
    .store_dict(subscriptions) ;; subscriptions dict
    .store_dict(subscribers) ;; subscribers dict
  .end_cell();
}

(int, int, int, int, int, int, cell) unpack_pool_config(slice cs) inline_ref {
  (int transaction_fee, int min_amount, int owner_fee, int penalty_fee,  int owner, int pending_owner,  cell nominators ) = 
          (cs~load_grams(), cs~load_grams(), cs~load_uint(32), cs~load_uint(32), cs~load_uint(256), cs~load_uint(256), cs~load_dict());
  return (transaction_fee, min_amount, owner_fee, penalty_fee, owner, pending_owner, nominators);
}

cell pack_pool_config(transaction_fee, min_amount, owner_fee, penalty_fee, owner, pending_owner, nominators) inline_ref {
  return ( begin_cell()
        .store_grams(transaction_fee) ;; minimal transaction value
        .store_grams(min_amount) ;; minimal subscription value
        .store_uint(owner_fee, 32) ;; encentive fee in percents / 100. 500 means 5%
        .store_uint(penalty_fee, 32) ;; penalty in percents / 100. 500 means 5%
        .store_uint(owner, 256) ;; owner address, 0 WC
        .store_uint(pending_owner, 256) ;; owner address, 0 WC
        .store_dict(nominators) ;; nominators dict
      .end_cell()
  );
}


builder pack_nominator(int status, int balance, int stake, int wallet_id) inline_ref {
  return( begin_cell()
      .store_uint(status, 8) ;; status
      .store_grams(balance) ;; balance
      .store_grams(stake) ;; at stake
      .store_uint(wallet_id, 32) ;; status

  );
}


(int, int, int, int) unpack_nominator(slice cs) inline_ref {
  (int status, int balance, int stake, int wallet_id ) = (cs~load_uint(8), cs~load_grams(), cs~load_grams(), cs~load_uint(32));
  return (status, balance, stake, wallet_id);
}




(int, int, int, int, int, int  ) unpack_subscription(slice cs) inline_ref {
  (int subscriber, int subscriber_wc, int grams, int start_period, int end_period, int status) = (cs~load_uint(256), cs~load_int(8), cs~load_grams(), cs~load_uint(16), cs~load_uint(16), cs~load_uint(8));
  return (subscriber, subscriber_wc, grams, start_period, end_period, status);
}


builder pack_subscription( int subscriber, int subscriber_wc, int grams, int start_period, int end_period, int status ){
  return(
    begin_cell()
        .store_uint(subscriber, 256) ;; subscriber wallet address, 0 WC
        .store_int(subscriber_wc, 8) ;; subscriber wallet address, 0 WC
        .store_grams(grams) ;; amount of grams
        .store_uint(start_period, 16) ;; start period
        .store_uint(end_period, 16) ;; end period
        .store_uint(status, 8) ;; status 
  );
}

(int, int, int, int, int ) unpack_performance(slice cs) inline_ref {
  (int rate, int aum, int units, int deposits, int withdrawals) = (cs~load_grams(), cs~load_grams(), cs~load_grams(), cs~load_grams(), cs~load_grams());
  cs.end_parse();
  return (rate, aum, units, deposits, withdrawals);
}

builder pack_performance(int rate, int aum, int units, int deposits, int withdrawals){
    return(
      begin_cell()
          .store_grams(rate) ;; unit rate
          .store_grams(aum) ;; grams under management 
          .store_grams(units) ;; units issued
          .store_grams(deposits) ;; deposits in grams
          .store_grams(withdrawals) ;; withdrawals in units 
    );
}

int unpack_subscribers_entry (slice cs){
  int subscription_id = cs~load_uint(32);
  return subscription_id;
}


builder pack_subscribers_entry (int subscription_id) {
  return(
    begin_cell()
        .store_uint(subscription_id, 32) ;; subscription id
  );
}

() send_message(addr, op, query_id, body, grams, mode) impure {
  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(addr)
    .store_grams(grams)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);
  if (body >= 0) {
    msg~store_uint(body, 32);
  }
  send_raw_message(msg.end_cell(), mode);
}

slice get_address_slice(int wc, int address){
  return (
    begin_cell().store_uint(6, 4).store_int(wc, 8).store_uint(address, 256).end_cell().begin_parse()
  );
}


;; redemption process
() process_redeem(slice s_addr, int query_id, int msg_value, int subscription_id) impure {
  var op = 0x4d444552;
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers) = unpack_state();
  var (src_wc, src_addr) = parse_std_addr(s_addr);

  var (subscription, found) = subscriptions.udict_get?(32, subscription_id);
  throw_unless( 41, found); ;; no subscription found
  (int subscriber, int subscriber_wc, int grams, int start_period, int end_period, int status) = unpack_subscription( subscription );
  throw_unless(42, status == 1 ); ;; not an active suscription
  throw_unless(43, (src_wc == subscriber_wc) & (src_addr == subscriber) ); ;; subscription doesn't belong to sender

  (var current_performance, found) = performance.udict_get?(16, current_period); ;; unpack current period
  throw_unless( 45, found);
  (int rate, int aum, int units, int deposits, int withdrawals) = unpack_performance( current_performance );

  ( int transaction_fee, _, _, int penalty_fee, int owner, _, _) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool


  if( start_period == current_period){ ;; redeem in current period. penalty applied
      throw_unless( 57, aum >= grams );
      int penalty = grams * penalty_fee / 10000; ;; calculate fast redemption penalty
      send_message(s_addr, op, query_id, 0, grams - penalty , 64); ;; return subscription excludion fast redemption penalty
      send_message(get_address_slice(0, owner), op, query_id, 0, penalty , 64); ;; Transfer penalty to owner
      deposits -= grams; ;; subtract grams from current deposits
      aum -= grams; ;; subtract withdrawal from AUM
      grams = 0; ;; reset subscription amount
      status = 0; ;; allow new subscriptions in current period   
  } else { ;; redeem subscriptions with the reward
      var (start_performance, found) = performance.udict_get?(16, start_period);
      throw_unless( 43, found);
      (var end_performance, found) = performance.udict_get?( 16, current_period - 1 );
      throw_unless( 44, found);
      var start_rate = start_performance~load_grams(); ;; get subscription initial rate
      var end_rate = end_performance~load_grams(); ;; get subscription final rate
      withdrawals += grams / start_rate; ;; calculate number of units and add to current period withdrawals
      throw_unless( 57, aum >= grams ); ;; throw if it exceeds current AUM, maybe beter to check the balance
      aum -= end_rate * grams / start_rate; ;; subtract redemption from current AUM
      status = 2; ;; set subscription status to redeemed
      end_period = current_period; ;; set end period 
      send_message(s_addr, op, query_id, 0, end_rate * grams / start_rate, 64); ;; transfer grams
   }


  accept_message(); 

  subscriptions~udict_set_builder(32, subscription_id, pack_subscription(subscriber, subscriber_wc, grams, start_period, end_period, status) );
  performance~udict_set_builder(16, current_period, pack_performance(rate, aum, units, deposits, withdrawals ));
  set_data( pack_state(current_period, pool_config, performance, subscriptions, subscribers) );

  return ();
}

() process_new_subscription(slice s_addr, int query_id, int msg_value) impure {
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers) = unpack_state();
  (int transaction_fee, _, _, _,  int owner, _, _) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool

  var (src_wc, src_addr) = parse_std_addr(s_addr);

  var subscriber_hash = cell_hash( begin_cell().store_uint(src_wc,8).store_uint(src_addr, 256).end_cell() );

  if( (src_wc == 0) & (src_addr == owner) ){
    return ();
  }
  int last_idx = (1 << 31) + ((1 << 31) - 1);
  cell subscriber = new_dict();
  accept_message();
  var (s_subscriber, found) = subscribers.idict_get?(257, subscriber_hash);
  int subscription_idx = 0;
  if( found ){ ;; check if there's a subscription for this address in current period
    subscriber = s_subscriber~load_dict(); ;; load subscriptions of the sender
    var (subscription_period, last_subscription, user_subscription_found) = subscriber.udict_get_prev?(32, last_idx);
    if( user_subscription_found & ( subscription_period == current_period )  ){ ;; subscription is the current one, add grams 
      var subscription_idx = last_subscription.preload_uint(32);
      (_, _, int grams, int start_period, int end_period, int status) = unpack_subscription( last_subscription );
      grams += msg_value - transaction_fee; ;; add grams 
      subscriptions~udict_set_builder(32, subscription_idx, pack_subscription(src_addr, src_wc, grams, start_period, end_period, status) ); ;; change subscription entry only 
    }
  }
  if( subscription_idx == 0 ){ ;; new subscription required
    var (last_subscription_idx, subscription, s_found ) = subscriptions.udict_get_prev?(32, last_idx);
    if ( s_found ) {
        subscription_idx = last_subscription_idx;
    }
    subscription_idx += 1;
    subscriber~udict_set_builder(16, current_period, pack_subscribers_entry(last_subscription_idx) ); ;; create new subscription for subscriber
    subscribers~idict_set_builder(257, subscriber_hash, begin_cell().store_dict(subscriber)); ;; save subscribers data 
    subscriptions~udict_set_builder(32, subscription_idx, pack_subscription( src_addr, src_wc, msg_value - transaction_fee, current_period, 0, 1) ); ;; create new subscription 
  }
  var (performance_s, f) = performance.udict_get?(16, current_period);
  (int rate, int aum, int units, int deposits, int withdrawals) = unpack_performance( performance_s );
  performance~udict_set_builder(16, current_period, pack_performance(rate, aum + msg_value, units, deposits + msg_value, withdrawals)); ;; update current period

  set_data( pack_state(current_period, pool_config, performance, subscriptions, subscribers)  );
  return();
}

() process_new_period(slice s_addr, int query_id, int msg_value) impure {
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers) = unpack_state();
  var (src_wc, src_addr) = parse_std_addr(s_addr);

  ( int transaction_fee, _, int owner_fee, _,  int owner, _, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool

  var (performance_s, found) = performance.udict_get?(16, current_period);
  throw_unless( 43, found);
  var (_, performance_prev_s, found) = performance.udict_get_prev?(16, current_period);
  throw_unless( 44, found);


  throw_unless( 50, ((src_wc == 0) & (src_addr == owner )) ); ;; owner only

  accept_message();

  int last_idx = (1 << 31) + ((1 << 31) - 1);

  (int rate, int aum, int units, int deposits, int withdrawals) = unpack_performance( performance_s );

  int prev_rate = performance_prev_s~load_grams(); ;; get rate in previous period
  int prev_aum = performance_prev_s~load_grams(); ;; get aum in previous period

  int owners_share = 0;
  int owners_units = 0;

  int managed_aum = aum - deposits; ;; calcaulte managed funds (actually doesn't include withdrawals, however I guess maybe it is common practice when initial AUM is taken)
  int managed_units = units - withdrawals; ;; calculate managed units 

  int new_rate = managed_aum / managed_units; ;; calculate the rate of unit 
  int new_units = aum / new_rate; ;; calucate number of units 

  if( (managed_units * new_rate) > (managed_units * prev_rate) ) ;; profir is the subject for incentive fee
  {
      owners_share = (((managed_units * new_rate) - (managed_units * prev_rate)) * owner_fee ) / 10000; ;; calculate incentive fee
      owners_units = owners_share / new_rate; ;; calculate units belongin to owner 

      var subscriber_hash = cell_hash( begin_cell().store_uint(src_wc,8).store_uint(src_addr, 256).end_cell() );


      var (s_subscriber, found) = subscribers.idict_get?(257, subscriber_hash); ;; find owner's subscriptions
      var subscriber = s_subscriber~load_dict();
      var (subscription_idx, subscription, s_found ) = subscriptions.udict_get_prev?(32, last_idx); ;; get last subscription index

      subscriber~udict_set_builder(16, current_period + 1, pack_subscribers_entry(subscription_idx)); ;; create subscription for the owner in new period
      subscriptions~udict_set_builder(32, subscription_idx + 1, pack_subscription(src_addr, src_wc, owners_share, current_period, 0, 1) ); ;; add new owner's subscription

  }


  performance~udict_set_builder(16, current_period,  pack_performance(new_rate, aum, units, deposits, withdrawals  )); ;; update performance in closing period
  current_period += 1;
  performance~udict_set_builder(16, current_period,  pack_performance(0, aum, new_units, 0, 0 ) ) ;  ;; create new performance period
  set_data( pack_state(current_period, pool_config, performance, subscriptions, subscribers)  );
  return ();
}

;; sets the status of nominators wallet
() process_activate_wallet(slice s_addr, int query_id, int msg_value, int wallet_id, int new_status) impure {
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers) = unpack_state();

  (int transaction_fee, int min_amount, int owner_fee, int penalty_fee, int owner, int pending_owner, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool

  var (src_wc, src_addr) = parse_std_addr(s_addr);
  throw_unless( 50, ((src_wc == 0) & (src_addr == owner )) ); ;; owner only
  var (nominator_s, found)  = nominators.udict_get?(256, wallet_id);
  throw_unless(51, found);
  var (status, balance, stake, wallet_id) = unpack_nominator( nominator_s );
  throw_if(78, status == 2);
  throw_if(52, status == new_status);
  accept_message();
  nominators~udict_set_builder(256, wallet_id, pack_nominator(new_status, balance, stake, wallet_id));
  pool_config = pack_pool_config(transaction_fee, min_amount, owner_fee, penalty_fee,  owner, pending_owner, nominators);
  set_data( pack_state(current_period, pool_config, performance, subscriptions, subscribers)  );
  return ();
}


;; send stake and balance request to all active nominators
() process_fetch_balances(slice s_addr, int query_id, int msg_value ) impure {
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers) = unpack_state();

  (int transaction_fee, _, _, _, int owner, _, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool

  var (src_wc, src_addr) = parse_std_addr(s_addr);
  throw_unless( 50, ((src_wc == 0) & (src_addr == owner )) ); ;; owner only
  accept_message();

  int address_idx = 0;
  int found = 0;

  var balance = get_balance();

  do {
    (address_idx, var nominator, found) = nominators.udict_get_next?(256, address_idx);
    if( found ){
      var (status, _, _, _) = unpack_nominator(nominator);
      if( status == 1){
        send_message( get_address_slice(-1, address_idx), 0x42435446, 1, 0, 1000000, 64 ); ;; BCFT
      }
    }
  } until( ~ found );

  var (performance_s, found) = performance.udict_get?(16, current_period);
  (int rate, int aum, int units, int deposits, int withdrawals) = unpack_performance( performance_s );

  ;; sets AUM to the balance of pool smart contract only in current period
  performance~udict_set_builder(16, current_period,  pack_performance(rate, balance.pair_first(), units, deposits, withdrawals  ) ); ;; update performance in closing period
  set_data( pack_state(current_period, pool_config, performance, subscriptions, subscribers)  );
}

;; receive data from nominator
() process_got_balance(slice s_addr, int query_id, int msg_value, int balance, int stake ) impure {
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers) = unpack_state();

  (int transaction_fee, int min_amount, int owner_fee, int penalty_fee, int owner, int pending_owner, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  var (src_wc, src_addr) = parse_std_addr(s_addr);
  var ( nominator,  f) = nominators.udict_get?(256, src_addr);
  throw_unless(55,  ( src_wc == -1 ) & f  ); ;; not the nominator

  accept_message();

  var (status, _, _, wallet_id) = unpack_nominator(nominator);
  nominators~udict_set_builder(256, src_addr, pack_nominator(status, balance, stake, wallet_id) );
  pool_config = pack_pool_config(transaction_fee, min_amount, owner_fee, penalty_fee,  owner, pending_owner, nominators);

  var (performance_s, found) = performance.udict_get?(16, current_period);
  (int rate, int aum, int units, int deposits, int withdrawals) = unpack_performance( performance_s );

  ;; add received stake and balance to current period
  performance~udict_set_builder(16, current_period,  pack_performance(rate, aum + balance + stake, units, deposits, withdrawals  )); ;; update poerformance in closing period

  set_data( pack_state(current_period, pool_config, performance, subscriptions, subscribers)  );
}

() process_set_config(slice s_addr, int query_id, int msg_value, int option, slice in_msg ) impure {
  (int current_period, cell pool_config, cell performance, cell subscriptions, cell subscribers) = unpack_state();

  (int transaction_fee, int min_amount, int owner_fee, int penalty_fee, int owner, int pending_owner, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool
  var (src_wc, src_addr) = parse_std_addr(s_addr);

  if( option & 1 ) {
    throw_unless(61,  ( src_wc == -1 ) & ( src_addr == owner ) ); ;; message must be sent from owner
    transaction_fee = in_msg~load_grams();
    throw_unless(71,  ( transaction_fee >= 100000000 ) & ( transaction_fee  <= 1000000000 ) ); ;; transaction fee must be in range 0.1 - 1 GR
  }

  if( option & 2 ) {
    throw_unless(61,  ( src_wc == -1 ) & ( src_addr == owner ) ); ;; message must be sent from owner
    min_amount = in_msg~load_grams();
    throw_unless(72,  min_amount >= 1000000000  ); ;; minimum subscription must be greater than 1 GR
  }

  if( option & 4 ) {
    throw_unless(61,  ( src_wc == -1 ) & ( src_addr == owner ) ); ;; message must be sent from owner
    owner_fee = in_msg~load_uint(32);
    throw_unless(73,  owner_fee <= 3000  ); ;; owner fee should never exeed 30%
  }

  if( option & 8 ) {
    throw_unless(61,  ( src_wc == -1 ) & ( src_addr == owner ) ); ;; message must be sent from owner
    penalty_fee = in_msg~load_uint(32);
    throw_unless(73,  penalty_fee <= 3000  ); ;; penalty fee should never exeed 30%
  }


  if( option & 16 ) {
    throw_unless(74,  ( src_wc == -1 ) & ( src_addr == pending_owner ) ); ;; message must be sent from pendign owner
    pending_owner = 0;
    owner = src_addr;
  }

  if( option & 32 ) {
    throw_unless(66,  ( src_wc == -1 ) & ( src_addr == owner ) ); ;; message must be sent from  owner
    pending_owner = in_msg~load_uint(256);
  }
  accept_message();


  pool_config = pack_pool_config(transaction_fee, min_amount, owner_fee, penalty_fee,  owner, pending_owner, nominators);
  set_data( pack_state(current_period, pool_config, performance, subscriptions, subscribers)  );
}

() process_transfer_to_wallet(slice s_addr, int query_id, int msg_value, int nominator_address, int grams ) impure {
  (_, cell pool_config, _, _, _) = unpack_state();

  (int transaction_fee, _, _, _, int owner, _, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool

  var (src_wc, src_addr) = parse_std_addr(s_addr);
  throw_unless( 50, ((src_wc == 0) & (src_addr == owner )) ); ;; owner only

  var balance = get_balance().pair_first();
  throw_unless( 80, balance >= grams ); ;; cannot transfer more grams than we have
  
  var (nominator, found) = nominators.udict_get?(256, nominator_address);
  throw_unless( 50, ~ found ); ;; nominator found

  accept_message();

  var (status, _, _, _) = unpack_nominator(nominator);
  if( status == 1){ ;; nominator is valid and active
        send_message( get_address_slice(-1, nominator_address), 0x0, 1, 0, grams, 64 ); ;; 0 - simple transfer
  }

}




() process_withdraw_from_wallet(slice s_addr, int query_id, int msg_value, int nominator_address, int grams ) impure {
  (_, cell pool_config, _, _, _) = unpack_state();

  (int transaction_fee, _, _, _, int owner, _, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  throw_unless( 60, msg_value >= transaction_fee ); ;; do not allow to dry out the pool

  var (src_wc, src_addr) = parse_std_addr(s_addr);
  throw_unless( 50, ((src_wc == 0) & (src_addr == owner )) ); ;; owner only
  
  var (nominator, found) = nominators.udict_get?(256, nominator_address);
  throw_unless( 51, ~ found ); ;; nominator found

  accept_message();

  var (status, _, _, _) = unpack_nominator(nominator);
  if( status == 1){ ;; nominator is valid and active
        send_message( get_address_slice(-1, nominator_address), 0x52445457, 1, 0, grams, 64 ); ;; WTDR - withdraw request
  }

}


;; process redeem text R123 for example
int decode_text(slice in_msg){
    var cur_char = in_msg~load_uint(8);
    throw_unless(56, cur_char != 52); ;; not a redemption request
    int res = 0;
    while( ~ in_msg.slice_empty?() ) {
        cur_char = in_msg~load_uint(8);
        throw_unless(57, (cur_char >= 0x30) & (cur_char <= 0x39) );
        res = (res * 10) + cur_char - 0x30;
    }
    return res;
}

;; process internal messages
() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    var cs = in_msg_cell.begin_parse();
    var flags = cs~load_uint(4);
    if( flags & 1 ){ ;; ignore bounced messages
      return();
    }
    var s_addr = cs~load_msg_addr();
    var (src_wc, src_addr) = parse_std_addr(s_addr);
    if( in_msg.slice_empty?() ) {
        return process_new_subscription(s_addr, 0, msg_value);
    }
    int op = in_msg~load_uint(32);
    if( op == 0 ){
          if( in_msg.slice_empty?() )
          {
            return process_new_subscription(s_addr, 0, msg_value);
          } else {
            int subscription_id = decode_text(in_msg);
            return process_redeem(s_addr, 0, msg_value, subscription_id);
          }
    }
    int query_id = in_msg~load_uint(64);
    if (op == 0x534D4452) { ;; RDMS Redeem
        int subscription_id = in_msg~load_uint(32);
        return process_redeem(s_addr, query_id, msg_value, subscription_id);
    }
    if( op == 0x544c5741 ) { ;; AWLT Activate wallet
        int wallet_address = in_msg~load_uint(256);
        int wallet_status = in_msg~load_uint(8);
        return process_activate_wallet(s_addr, query_id, msg_value, wallet_address, wallet_status);
    }
    if( op == 0x534e5254 ) { ;; TRNS transfer funds to nominator
        int wallet_address = in_msg~load_uint(256);
        int grams = in_msg~load_grams();
        return process_transfer_to_wallet(s_addr, query_id, msg_value, wallet_address, grams);
    }
    if( op == 0x52445457 ) { ;; WTDR withdraw funds from nominator
        int wallet_address = in_msg~load_uint(256);
        int grams = in_msg~load_grams();
        return process_withdraw_from_wallet(s_addr, query_id, msg_value, wallet_address, grams);
    }
    if( op == 0x42445055 ) { ;; UPDB Fetch balances
        int wallet_address = in_msg~load_uint(256);
        int wallet_id = in_msg~load_uint(8);
        return process_fetch_balances(s_addr, query_id, msg_value);
    }
    if( op == 0x4c425447 ) { ;; GTBL got balances
        int balance = in_msg~load_grams();
        int stake = in_msg~load_grams();
        return process_got_balance(s_addr, query_id, msg_value, balance, stake);
    }
    if( op == 0x5057454e ) { ;; NEWP new period
        return process_new_period(s_addr, query_id, msg_value);
    }
    if( op == 0x43544553 ) { ;; SETC set config
        int option = in_msg~load_uint(8);
        return process_set_config(s_addr, query_id, msg_value, option, in_msg);
    }

}


int calculate_nominator_address(cell code, slice pool_addr, int idx) {
    cell init_state = begin_cell().store_uint(0,1).store_slice(pool_addr).store_uint(idx, 32).store_uint(0, 32).store_grams(0).store_grams(0).store_grams(0).end_cell();
    cell nominator = begin_cell().store_uint(0, 2).store_uint(3, 2).store_uint(0, 1).store_ref(code).store_ref(init_state).end_cell();
    return begin_cell().store_uint( cell_hash(nominator), 256).end_cell().begin_parse().preload_uint(256);
}


() try_init(slice in_msg) impure inline_ref {
  ;; first external query is accepted to setup initial phase
  var cs = in_msg;
  var ds = begin_parse(get_data());
  (int current_period, cell pool_config) = (ds~load_uint(16), ds~load_ref());
  ds.end_parse();
  throw_unless(30, current_period == 0 );

  throw_if(37, current_period);
  accept_message();
  cs~touch();

  (int transaction_fee, int min_amount, int owner_fee, int penalty_fee, int owner, int pending_owner, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  var pool_address = cs~load_bits(256);
  var nominators = cs~load_ref();
  var nominator_code = cs~load_ref();

  var s_found = 0;
  var nominator_address = 0;
  do { ;; making sure all submitted addresses are legit nominator contracts
    (nominator_address, var nominator, s_found ) = nominators.udict_get_next?(256, nominator_address); ;; get next nominator address from init message
    if( s_found ){
      (_, _, _, var nominator_idx) = unpack_nominator(nominator);
      var hash = calculate_nominator_address(nominator_code, pool_address, nominator_idx);
      
      if(  hash != nominator_address ){
        nominators~udict_set_builder(256, nominator_address, pack_nominator(2, 0, 0, nominator_idx)); ;; invalid address
      }
    }
  } until( ~ s_found );

  pool_config = pack_pool_config(transaction_fee, min_amount, owner_fee, penalty_fee,  owner, 0, nominators);

  var performance = new_dict();
  var balance = get_balance();
  var gram_balance = balance.pair_first();
  ;; Initialize performance, set unit rate 10000 grams for the unit
  performance~udict_set_builder(16, current_period, pack_performance(10000, gram_balance, gram_balance / 10000, 0, 0) );
  var subscriptions = new_dict();
  var subscribers = new_dict();
  var subscriber = new_dict();

  ;;var subscriber_hash = begin_cell().store_uint(cell_hash( begin_cell().store_uint(0,8).store_uint(owner, 256).end_cell() ), 256 ).end_cell().begin_parse().preload_uint(256);
  var subscriber_hash = cell_hash( begin_cell().store_int(0,8).store_uint(owner, 256).end_cell());

  subscriber~udict_set_builder(16, current_period, pack_subscribers_entry(1)); ;; store new non-withdrawable subsciption index for the owner
  subscribers~idict_set_builder(257, subscriber_hash, begin_cell().store_dict(subscriber) ); ;; create subscriber entry for the owner
  subscriptions~udict_set_builder(32, 1, pack_subscription(owner, 0, gram_balance, current_period, 0, 1) ); ;; store new subscription

  current_period += 1; ;; create new period for incoming subscriptions
  performance~udict_set_builder(16, current_period, pack_performance(0, gram_balance, gram_balance / 10000, 0, 0) ); ;; Initialize performance
  set_data(pack_state(current_period, pool_config, performance, subscriptions, subscribers ));
}


() recv_external(slice in_msg) impure {
  ;; empty message triggers init
  return try_init(in_msg);
}



int get_owner() method_id {
  (_, cell pool_config, _, _, _) = unpack_state();
  (_, _, _, _, int owner, _, _) = unpack_pool_config(pool_config.begin_parse());

  return owner;
}

int get_pending_owner() method_id {
  (_, cell pool_config, _, _, _) = unpack_state();
  (_, _, _, _, _, int pending_owner, _) = unpack_pool_config(pool_config.begin_parse());

  return pending_owner;
}


int get_current_period() method_id {
  (int current_period, _, _, _, _) = unpack_state();
  return current_period;
}

cell get_nominators() method_id {
  (_, cell pool_config, _, _, _) = unpack_state();
  (_, _, _, _, _, _, cell nominators) = unpack_pool_config(pool_config.begin_parse());
  return nominators;
}

int get_subscriptions_count() method_id {
  (_, _, _ , var subscriptions, _ ) = unpack_state();
  int last_idx = (1 << 31) + ((1 << 31) - 1);
  var (subscription_idx, subscription, s_found ) = subscriptions.udict_get_prev?(32, last_idx); ;; get last subscription index
  if( s_found ){
    return subscription_idx;
  }
  return 0;
}

(int, int, int, int, int, int, int) get_subscription(int subscription_id, int direction) method_id {
  (_, _, _ , var subscriptions, _ ) = unpack_state();
  int s_found = 0;
  slice subscription = null();
  if( direction == 0 ){
      (subscription, s_found ) = subscriptions.udict_get?(32, subscription_id); ;; get subscription by index
  }
  if( direction == 1 ){
      (subscription_id, subscription, s_found ) = subscriptions.udict_get_next?(32, subscription_id); ;; get next subscription from index
  }
  if( direction == -1 ){
      (subscription_id, subscription, s_found ) = subscriptions.udict_get_prev?(32, subscription_id); ;; get previous subscription from index
  }

  if( s_found ){
      (int subscriber, int subsctiber_wc, int grams, int start_period, int end_period, int status) = unpack_subscription( subscription );
      return( subscription_id, subsctiber_wc, subscriber, grams, start_period, end_period, status);
  }
  return ( 0,0,0,0,0,0,0);
}


(int, int, int, int, int ) get_nominator(int nominator_address, int direction) method_id {
  (_, var pool_config, _ , _ , _ ) = unpack_state();
  int s_found = 0;
  slice nominator = null();
   (_, _, _, _, _, _, cell nominators) = unpack_pool_config(pool_config.begin_parse());

  if( direction == 0 ){
      (nominator, s_found ) = nominators.udict_get?(256, nominator_address); ;; get subscription by index
  }
  if( direction == 1 ){
      (nominator_address, nominator, s_found ) = nominators.udict_get_next?(256, nominator_address); ;; get next subscription from index
  }
  if( direction == -1 ){
      (nominator_address, nominator, s_found ) = nominators.udict_get_prev?(256, nominator_address); ;; get previous subscription from index
  }

  if( s_found ){
      (int status, int balance, int stake, int wallet_id) = unpack_nominator( nominator );
      return( nominator_address, status, balance, stake, wallet_id);
  }
  return (0,0,0,0,0 );
}

(int, int, int, int, int, int ) get_performance(int period, int direction) method_id {
  (_, _, var performance , _ , _ ) = unpack_state();
  int s_found = 0;
  slice performance_s = null();

  if( direction == 0 ){
      (performance_s, s_found ) = performance.udict_get?(16, period); ;; get performance in period
  }
  if( direction == 1 ){
      (period, performance_s, s_found ) = performance.udict_get_next?(16, period); ;; get next performance from period
  }
  if( direction == -1 ){
      (period, performance_s, s_found ) = performance.udict_get_prev?(16, period); ;; get previous performance from period
  }

  if( s_found ){
      (int aum, int units, int rate, int deposits, int withdrawals ) = unpack_performance(performance_s);
      return( period, aum, units, rate, deposits, withdrawals);
  }
  return (0, 0, 0, 0, 0, 0 );
}

(int, int) get_subscribers_subscription(int subscribers_wc, int subscriber_address, int period, int direction) method_id {
  (_, _, _ , _ , var subscribers ) = unpack_state();
  int s_found = 0;
  slice subscriber_entry_s = null();

  var subscriber_hash = cell_hash( begin_cell().store_int(subscribers_wc,8).store_uint(subscriber_address, 256).end_cell() );


  var (subscriber_s, s_found) = subscribers.idict_get?(257, subscriber_hash);
  if( ~ s_found ){
    return (0, 0);
  }

  var subscriber = subscriber_s.preload_dict();

  if( direction == 0 ){
      (subscriber_entry_s, s_found ) = subscriber.udict_get?(16, period); ;; get subscription entry in period
  }
  if( direction == 1 ){
      (period, subscriber_entry_s, s_found ) = subscriber.udict_get_next?(16, period); ;; get next subscription entry
  }
  if( direction == -1 ){
      (period, subscriber_entry_s, s_found ) = subscriber.udict_get_prev?(16, period); ;; get previous subscription entry
  }

  if( s_found ){
      int subscription_id = unpack_subscribers_entry(subscriber_entry_s);
      return( period, subscription_id );
  }

  return (0, 0 );
}

_ get_subscribers_subscriptions(int subscriber_wc, int subscriber_address) method_id {
  (_, _, _ , _ , var subscribers ) = unpack_state();
  int s_found = 0;
  slice subscriber_entry_s = null();
  var res = nil;
  var period = 0;

  var subscriber_hash = cell_hash( begin_cell().store_int(subscriber_wc,8).store_uint(subscriber_address, 256).end_cell() );


  var (subscriber_s, s_found) = subscribers.idict_get?(257, subscriber_hash);

  if( ~ s_found ){
    return res;
  }

  var subscriber = subscriber_s.preload_dict();


  do {
        (period, var subscriber_entry_s, s_found) = subscriber.udict_get_next?(16, period);
        if( s_found ){
            var subscription_id = unpack_subscribers_entry(subscriber_entry_s);
            res = cons( pair(period, subscription_id), res );
        }

  } until( ~ s_found );
  return res;
}


